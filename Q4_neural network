```{r}
library(neuralnet)
AmeOptPrice <- function(C,t, steps, r, k ,delta){
  n<-nrow(C)
  #t is time in years until maturity -- needs to match t in stock path function?
  #S0 <- C[1,1]
  #Paths <- nrow(C)
  steps <- ncol(C)-1
  paths<-C[,ncol(C)]
  dt <- t/steps #time interval for each step
  earlyprice<-pmax(k-C,0) #if you exercise early, then use this price
  holdingvalue<-array(0,dim=dim(C))#create an array for holding values
  optionv<-array(0,dim=dim(C)) # creat an array for option
  holdingvalue[,ncol(holdingvalue)]<-earlyprice[,ncol(earlyprice)]
  optionv[,ncol(optionv)]<-earlyprice[,ncol(earlyprice)]
  mcp<-C[,ncol(C)-1]
  #simulate n paths
  for (i in 1:nrow(C)){
    price<-StockPath(276, sigma, mcp[i], t, np=steps, r, delta=0) #we need to input sigma
    payoff<-pmax(k-price[,ncol(price)],0)*exp(-r*dt)
    holdingvalue[i,ncol(holdingvalue)-1]<-mean(payoff)
  }
  optionv[,ncol(optionv)-1]<-pmax(holdingvalue[,ncol(holdingvalue)-1],earlyprice[,ncol(earlyprice)-1])
  #regression 
  # Random sampling
  #samplesize = 0.60 * nrow(data)
  #set.seed(80)
  #index = sample( seq_len ( nrow ( data ) ), size = samplesize )

  #fit neural networks
  for (j in seq(from=ncol(holdingvalue)-1, to=2, by=-1)){
    X<-array(C[,j])
    Y<-array(optionv[,j])
    CC<-cbind(X,Y)
    regress_model <- neuralnet(Y~X,CC)
    value<-C[,(j-1)]#last column before j
    for(k in nrow(C)){
      p<-StockPath(276, sigma, S0=value[k], t, np=t, r, delta=0)
      price<-as.data.frame(p)
      predictedov1<-predict(regress_model,newdata=price)
      predictedov<-predictedov*exp(-r*dt)
      holdingvalue[k,j-1]<-mean(predictedov)
    }
    optionv[,j-1]=pmax(earlyprice[,j-1],holdingvalue[,j-1])
  }
  payoff<-c()
  for (z in nrow(earlyprice)){
    wx<-which(earlyprice[z,]>holdingvalue[z,])
    if(nrow(wx)==0){
      payoff[z]=optionv[z,ncol(optionv)]*exp(-r*t)
    }
    else{
      payoff[z]<-optionv[z,wx[1]]*exp(-r*wx[1]*dt)
    }
  }
  finalprice<-mean(payoff)
  varian<-var(payoff)
  return(payoff,finalprice,varian)
}
```

```{r}
Prices <- read.csv(file = '~/Documents/PSTAT 276/IBM-MSFT-HAS.csv', header = T, sep = ",")
IBM_Vol <- StockVol(Prices$IBM)
MSFT_Vol <- StockVol(Prices$MSFT)
HAS_Vol <- StockVol(Prices$HAS)
IBM_Path <- StockPath(20, sigma <- IBM_Vol ,S0 =
                        Prices$IBM[length(Prices$IBM)] , 3 ,6,.06,0)
MSFT_Path <- StockPath(20, sigma <- MSFT_Vol ,S0 = 
                         Prices$MSFT[length(Prices$MSFT)] , 3 ,6,.06,0)
HAS_Path <- StockPath(20, sigma <- HAS_Vol ,S0 =
                        Prices$HAS[length(Prices$HAS)] , 3 ,6,.06,0)

Prices_IBM <- as.matrix(IBM_Path)
Prices_MSFT <- as.matrix(MSFT_Path)
Prices_HAS <- as.matrix(HAS_Path)
r <- 0.06
T <- 3
Prices_IBM<-as.data.frame(Prices_IBM)
IBM_put <- AmeOptPrice(C=Prices_IBM,T, steps, r, k=20,delta)
MSFT_put <- AmeOptPrice(Prices_MSFT,T,r)
HAS_put <- AmeOptPrice(Prices_HAS,T,r)
IBM_put
#MSFT_put
#HAS_put
```
